<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FloatingRaft</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-23T15:37:52.587Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>FloatingRaft</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023NewStarCTFWeek1&amp;2-FloatingRaft复现</title>
    <link href="http://example.com/2024/11/23/2023NewStarCTFWeek1&amp;2-FloatingRaft%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2024/11/23/2023NewStarCTFWeek1&amp;2-FloatingRaft%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-11-23T15:34:20.442Z</published>
    <updated>2024-11-23T15:37:52.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h3><p>一道签到题，根据题目提示应该可以用CyberChef一把梭</p><p>打开txt文档，根据题目提示把这串密码复制粘贴至CyberChef</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731726184641-e8e65431-4596-4767-b262-094321305b9e.png"></p><p>先按base32解码，再按base58解码，最后再base64解码，直接得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731726412987-1a66f1cb-7b03-4f80-8b2f-135942c42b0b.png"></p><blockquote><p><strong><font style="color:#000000;">知识点总结：这道题考察了CyberChef的使用以及对几种Base类型编码的判断，然后就可以一把梭</font></strong></p></blockquote><p><strong><font style="color:#000000;"></font></strong></p><h3 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a><font style="color:#000000;">机密图片</font></h3><p>图片隐写题，先查看图片属性，没有信息</p><p>再查看图片本身，是一张QR码，识别后也没有任何信息</p><p>用010Editor打开，查看文件头以及数据块，也没有异常，也没有CRC值报错</p><p>那就猜测这题可能考察LSB隐写</p><p>用StegSlove打开，LSB常规操作得到flag如下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731727184261-5d108341-872d-4fa6-9872-ddb237ffe16d.png"></p><blockquote><p><strong>知识点总结：这道题考察了LSB隐写的相关知识以及Stegsolve的使用</strong></p></blockquote><hr><h3 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h3><p>流量分析题，题目提示的很明确，用wireshark来解题</p><p>（但是笔者对这类题目不是很拿手）</p><p>用wireshark打开附件的流量包，观察得到只有TCP协议与HTTP协议流量</p><p>用过滤器过滤出HTTP流量，检索flag关键字，可以看到flag相关流量</p><p>导出所有HTTP对象文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731732942294-b153ce85-d969-4aa7-8173-d07b3684005a.png"></p><p>但是几个与flag相关的文件内容都只有NOT FOUND</p><p>再浏览了一遍所有文件，找到一个很可能是flag的文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731733054530-9c8bbd6b-94c3-4076-a1b7-5b7e0c989eb3.png"></p><p>打开后是一串base编码，按照文件名提示应该是Base64编码</p><p>复制粘贴至CyberChef，按Base64解码两次得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731733218606-2b114885-1f6d-4e75-8347-dbc8e37f9f78.png"></p><hr><blockquote><p><strong>知识点总结：这道题考察了流量分析的基本操作、Wireshark的使用，以及Base类型的解码</strong></p></blockquote><h3 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h3><p>压缩包题，根据题目提示，先用010Editor看看</p><p>发现题目给的文件应该是zip文件，但是文件头和文件名后缀不对，我们都改回来</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731734619036-a365a8c7-dc56-4de3-b480-6225c324e48d.png"></p><p>改完后解压，得到一个flag.zip，直接解压提示文件损坏</p><p>修复后解压提示需要密码</p><p>观察了一下压缩包注释，应该是一段Base64编码，我们解码一下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731834103315-d9267be2-d104-4ead-9b8f-c08e3ac2c29c.png"></p><p>压缩包密码是六位纯数字，直接用Archpr暴力破解得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731834271644-4a448d94-6b4d-4c0a-bf28-8fdc8269164b.png"></p><blockquote><p><strong>知识点总结：这道题考察了zip文件头、base64解码以及压缩包密码暴力破解</strong></p></blockquote><h3 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h3><p>打开附件，一个空白的文档</p><p>Ctrl+A全选，发现全是空格</p><p>第一反应是零宽度字符，复制粘贴到零宽度字符在线解密网站<a href="https://www.mzy0.com/ctftools/zerowidth1/">https://www.mzy0.com/ctftools/zerowidth1/</a></p><p>解密后什么都没有，说明思路是错误的</p><p>通过搜索得知了一种名叫WhiteSpace的编程语言，我们找到了一个运行WhiteSpace语言的在线网站<a href="https://vii5ard.github.io/whitespace/">https://vii5ard.github.io/whitespace/</a></p><p>复制粘贴后运行得到了flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731834995742-6c795a5b-9d13-4d38-98f5-d9c154558143.png"></p><blockquote><p><strong>知识点总结：这道题考察了一种名为WhiteSpace的编程语言</strong></p></blockquote><h3 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h3><p>附件是一张jpg图片，图片中只有一个眼睛，背景有很多规则分布的小灰点</p><p>根据题目名字以及图片提示，猜测是被SilentEye隐写了</p><p>直接用SilentEye解码得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731835540852-89a848c2-b872-4d26-b32e-94a60b84fc78.png"></p><blockquote><p><strong>知识点总结：这道题考察了被SilentEye隐写后的图片特征以及SilentEye工具的使用</strong></p></blockquote><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="新建Word文档"><a href="#新建Word文档" class="headerlink" title="新建Word文档"></a>新建Word文档</h3><p>题目附件给了一个后缀名为docx的文件</p><p>打开文件，是空白的</p><p>用010Editor打开查看，发现是PK头且文件中包含了其他文件</p><p>联想到了压缩包以及docx文件的本质就是压缩包，于是修改后缀名为zip并解压，得到了一个文件夹</p><p>用记事本打开word目录下的document.xml文件，发现了其中一段文字</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731836326051-7e48748c-fc7d-42aa-89d6-b1128027d0f2.png"></p><p>联想到了与佛论禅编码，但是与佛论禅编码一般由“佛曰”或“佛又曰”开头而非“新佛曰”</p><p>尝试用与佛论禅解码，也确实解不出来</p><p>但是又了解到一种和与佛论禅编码类似的编码，叫“新约佛论禅”</p><p><a href="http://hi.pcmoe.net/buddha.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTczNzU3NTAsImZpbGVHVUlEIjoiRHk1ZWtISmhLbzBhcDV2MyIsImlhdCI6MTY5NzM3NTQ1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjotODMxMTE0NzQxNX0.mTWIluoUq65XDAhk6XrX9TnWYTlf03r-E2CS43TFFdY">新约佛论禅&#x2F;佛曰加密 - 萌研社 - PcMoe!</a></p><p>用新约佛论禅解码得到了flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731836948450-511e7e8d-d29d-4886-afec-03e0b365d44d.png"></p><blockquote><p><strong>知识点总结：这道题考察了docx文档的本质是压缩文件以及新约佛论禅密码的解密</strong></p></blockquote><h3 id="永不消逝的电波"><a href="#永不消逝的电波" class="headerlink" title="永不消逝的电波"></a>永不消逝的电波</h3><p>题目给了一个wav文件，打开播放是一段摩斯密码</p><p>导入到摩斯密码在线听译网站<a href="https://morsecodemagic.com/zh/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81%E9%9F%B3%E9%A2%91%E8%A7%A3%E7%A0%81%E5%99%A8/">摩尔斯电码音频解码器 – Morse Code Magic</a>进行解码得到flag内容</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731837333403-11ed0ae8-9acd-4dce-ba99-4b679119238d.png"></p><p>删去flag后包上flag{}提交</p><blockquote><p><strong>知识点总结：这道题考察了摩斯密码的解码</strong></p></blockquote><hr><hr><h3 id="1-序章"><a href="#1-序章" class="headerlink" title="1-序章"></a>1-序章</h3><p>根据题目提示这应该是一道SQL盲注日志分析题</p><p>先了解了一下SQL盲注是什么</p><p><a href="https://blog.csdn.net/weixin_49150931/article/details/111829828">SQL盲注(原理概述、分类)-CSDN博客</a></p><p>SQL注入这方面可以说是完全不懂，所以就找了几篇师傅的博客和去年比赛的wp来跟着做了</p><p>参考文档：</p><p><a href="https://blog.csdn.net/weixin_64422989/article/details/133849967?spm=1001.2014.3001.5502">NewStarCTF 2023 公开赛道 Week2_[newstarctf 2023 公开赛道]upload again!-CSDN博客</a></p><p><a href="https://www.freebuf.com/articles/web/264144.html">安全事件分析之SQL盲注溯源 - FreeBuf网络安全行业门户</a></p><p>根据参考文档中提到的，攻击者逐一测试从’username’和’password’字段中提取字符的Ascii码，以确定其中的某些字符，如果条件为真，’sleep(1)’函数执行，导致服务器休眠一秒钟，属于时间盲注</p><p>解题思路大概有了，接下来解题需要一个脚本检测时间变化（当然不用脚本一次次请求自己看过去也行）</p><p>不太会写代码，所以只是构思了一下脚本的思路大致如下：</p><p>:::info<br>由于每条请求的内容差别只在时间与检测的Ascii字符上，所以先将所有请求的时间与Ascii码对应存储到两个列表中，再新建一个空列表_result</p><p>然后对时间列表中第i个元素与第i+1个元素做差，如果差值为1则记录Ascii码列表中的第i项并存放在_result列表中</p><p>最后将_result列表中的的每一项转换成对应的Ascii字符并输出，输出结果就是攻击者获取到的数据</p><p>:::</p><p>找到了官方放出的脚本，思路与官方思路一致，但是官方脚本适用于python2.x版本，而我用的是python3.7.9，所以官方脚本编译报错，我们对其稍微进行了修改，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"> </span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;access.log&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">datas = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    t = urllib.parse.unquote(line)</span><br><span class="line">    datas.append(t)</span><br><span class="line"> </span><br><span class="line">flag_ascii = &#123;&#125; </span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">    matchObj = re.search( <span class="string">r&#x27;user\),(.*?),1\)\)=(.*?),sleep&#x27;</span>, data)</span><br><span class="line">    <span class="keyword">if</span> matchObj:</span><br><span class="line">        key = <span class="built_in">int</span>(matchObj.group(<span class="number">1</span>))</span><br><span class="line">        value = <span class="built_in">int</span>(matchObj.group(<span class="number">2</span>))</span><br><span class="line">        flag_ascii[key] = value</span><br><span class="line">       </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> flag_ascii.values():</span><br><span class="line">    flag += <span class="built_in">chr</span>(value)</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>跑一遍脚本就得到了flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731852610838-d97dfd6b-a8eb-48cf-ad94-c01c8cb79160.png"></p><blockquote><p><strong>知识点总结：这道题考察了SQL盲注中的时间盲注，攻击者通过对系统时间的变化来判断注入是否成功，通过这些请求我们就可以用攻击者同样的方法来获取攻击者获取到的信息</strong></p></blockquote><h3 id="base"><a href="#base" class="headerlink" title="base!"></a>base!</h3><p>先把整段文字按base64解码了一遍，大部分可读但是与flag毫不相关，并且文字中穿插着部分乱码，说明这应该是被破坏后的一段base64编码</p><p>猜测应该是要将破坏的部分提取出来然后对这部分再进行其它类型的base解码</p><p>接下来又要写脚本，还是借鉴了其他人的wp中的脚本，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    base64chars = <span class="string">b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_stego</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;base!.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#文件放这里</span></span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">b&#x27;&#x27;</span>  <span class="comment"># 使用字节串</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">            norm_line = base64.b64encode(base64.b64decode(steg_line)).replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="built_in">print</span>(diff)</span><br><span class="line">            pads_num = steg_line.count(<span class="string">b&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>).encode()  <span class="comment"># 将二进制字符串转换为字节串</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">b&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span>(goflag(bin_str))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">goflag</span>(<span class="params">bin_str</span>):</span><br><span class="line">    res_str = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">bytes</span>([<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)])</span><br><span class="line">    <span class="keyword">return</span> res_str.decode()  <span class="comment"># 将字节串转换为字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure><p>跑一遍脚本，得到了一串字符，应该也是用base编码的</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731854269866-daab5498-2eca-43a2-ae05-7b4aa2913f6b.png"></p><p>复制粘贴到CyberChef中解码，按base58解码后得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731854327791-d3cc480a-261b-4e5b-859f-01a692c1ec46.png"></p><blockquote><p><strong>知识点总结：这道题考察了base类型编码，但不是整段编码都是一种类型的base编码，而是有其他种类的base编码混淆其中，把base64编码的内容筛去就能得到剩下的base58编码的内容了</strong></p></blockquote><h3 id="WebShell的利用"><a href="#WebShell的利用" class="headerlink" title="WebShell的利用"></a>WebShell的利用</h3><p>一个php文件，打开后观察，猜测应该是php混淆加密的内容</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731855235280-701c3b01-0fb2-4cb0-a9d9-6d2ccd36cadc.png"></p><p>用php混淆破解网站破解这个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731855277135-4c30586e-7c42-42d6-82df-a735665782e2.png"></p><p>进入靶机，传参得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1731859810768-efaa8e6c-f119-416b-99cb-e1a7a67bfc10.png"></p><blockquote><p><strong>知识点总结：这道题考查了php混淆加密、php语言的基本知识以及hackbar传参</strong></p></blockquote><h3 id="Jvav"><a href="#Jvav" class="headerlink" title="Jvav"></a>Jvav</h3><p>附件是一张照片，用binwalk、010Editor、StegSolve都没有看出端倪</p><p>和题目结合在一起进行联想，猜测是Java盲水印隐写</p><p><a href="https://blog.51cto.com/u_16175522/7195549">盲水印提取工具 java_mob649e8169ec5f的技术博客_51CTO博客</a></p><p><a href="https://blog.csdn.net/qq_39972370/article/details/134145890">【CTF-misc】java盲水印BlindWatermark工具使用_ctf 盲水印-CSDN博客</a></p><p>参考这两篇文章，得知Java盲水印隐写要用到BlindWatermark工具</p><p>但是github上下载的BlindWatermark无法直接使用，需要将其编译成jar文件</p><p>但是编译这步没学会……</p><p>后面的步骤应该就是用java运行jar文件从图片中提取出水印，水印就是flag</p><blockquote><p><strong>知识点总结：这道题考察了java盲水印的提取</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Week-1&quot;&gt;&lt;a href=&quot;#Week-1&quot; class=&quot;headerlink&quot; title=&quot;Week 1&quot;&gt;&lt;/a&gt;Week 1&lt;/h2&gt;&lt;h3 id=&quot;CyberChef’s-Secret&quot;&gt;&lt;a href=&quot;#CyberChef’s-Secret&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2023NewStarCTFWeek3-FloatingRaft复现</title>
    <link href="http://example.com/2024/11/23/2023NewStarCTFWeek3-FloatingRaft%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2024/11/23/2023NewStarCTFWeek3-FloatingRaft%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-11-23T15:34:20.442Z</published>
    <updated>2024-11-23T15:37:27.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阳光开朗大男孩"><a href="#阳光开朗大男孩" class="headerlink" title="阳光开朗大男孩"></a>阳光开朗大男孩</h3><p>附件是两个txt文件，名为flag和secret</p><p>打开flag.txt，文本内容全部由emoji表情组成，先猜测是emoji编码</p><blockquote><p>emoji编码又叫base100 编码，base100是一种加密，加密后全是emoji表情</p></blockquote><p>用emoji编码解码器尝试解码，无果<a href="http://www.atoolbox.net/Tool.php?Id=937">Emoji表情符号编码&#x2F;解码 - 一个工具箱 - 好用的在线工具都在这里！</a></p><p>经过查询，发现还有一种叫emoji aes的编码类型，这种编码类型与emoji编码不同的是，这种编码将原文转换为密文时需要一个私钥key，而解码也需要这个私钥key才能将密文转换为原文</p><p>所以另一个secret文件中所包含的应当是这个私钥</p><p>打开secret.txt，文本内容全部由社会主义核心价值观组成，猜测是核心价值观编码，用核心价值观编码解码器解码试试<a href="https://ctf.bugku.com/tool/cvecode">核心价值观编码 - Bugku CTF平台</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732016425721-0b2f370d-d2ff-450c-bf99-d63f1c9c6a69.png"></p><p>把’s000_h4rd_p4sssw0rdddd’作为私钥，用emoji aes解码器解码得到flag</p><p><a href="https://aghorler.github.io/emoji-aes/">https://aghorler.github.io/emoji-aes/</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732016566666-631d857f-efd5-4581-bce5-5d2cd711dc2c.png"></p><p>后面又去了解了一下AES。</p><blockquote><p><font style="color:rgb(51, 51, 51);">参考资料：</font></p><p><a href="https://baike.baidu.com/item/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86/468774">https://baike.baidu.com/item/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86/468774</a></p><p><a href="https://blog.csdn.net/qq_28205153/article/details/55798628">https://blog.csdn.net/qq_28205153&#x2F;article&#x2F;details&#x2F;55798628</a></p></blockquote><p>AES，中文名叫高级加密标准<font style="color:rgb(51, 51, 51);">（Advanced Encryption Standard，AES），这是最常见的对称加密算法。加密者设置一个密钥K，以密钥K与明文P为参数代入AES加密函数，最后输出密文C。而解密者需要知道密文C与密钥K，以密文C与密钥K为参数代入AES解密函数，从而得到明文P</font></p><blockquote><p><strong>知识点总结：这道题考察了emoji aes编码解码与核心价值观编码解码，这几种编码与前面的与佛论禅、新约佛论禅都算比较抽象的几种编码类型</strong></p></blockquote><h3 id="大怨种"><a href="#大怨种" class="headerlink" title="大怨种"></a>大怨种</h3><p>一张gif图片，有一帧里有一张二维码，我们用StegSolve打开逐帧查看并导出那一帧</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732111689064-565b6f28-7f5a-4e96-a02f-5b1fe2c1978d.png"></p><p>通过查询，得知这种二维码是汉信码，用汉信码在线识别网站<a href="https://tuzim.net/hxdecode/">在线汉信码识别,汉信码解码 - 兔子二维码</a>识别得到flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732112104535-4f7a5511-7bdb-426b-a4b0-59912ebefd45.png"></p><p>通过了解，常见的二维码有<font style="color:rgb(36, 41, 47);">QRCode，PDF417，DataMatrix，汉信码、GridmMatrix、Aztec等，我们最经常使用的是QRCode，而AztecCode在2024 NewStarCTF Week4的扫码领取flag一题中也有考到过</font></p><p><font style="color:rgb(36, 41, 47);"></font></p><blockquote><p><strong><font style="color:rgb(36, 41, 47);">知识点总结：这道题考察了stegsolve如何导出gif文件其中一帧以及常见二维码中的汉信码的识别</font></strong></p></blockquote><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2-分析"></a><font style="color:rgb(36, 41, 47);">2-分析</font></h3><p>一道流量分析题，这次需要找到的是攻击者登录使用的用户名、存在漏洞的文件名以及攻击者用来执行恶意代码的文件名</p><p>打开流量包，粗看一眼，只有HTTP与TCP协议，直接过滤出HTPP协议流量</p><p>这里我们先搞懂一下HTTP协议与TCP协议之间的区别与联系</p><blockquote><p><strong>TCP协议</strong><strong><font style="color:rgb(77, 77, 77);">是传输层协议，主要解决数据如何在网络中传输，而HTTP协议是应用层协议，主要是解决如何包装数据。通俗的来说HTTP的任务是与服务器交换信息，它不管怎么连到服务器和保证数据正确的事情。而TCP的任务是保证连接的可靠，它只管连接，它不管连接后要传什么数据。HTTP协议是建立在TCP协议之上的一种应用，但是HTTP不一定要建立在TCP协议之上，</font>****<font style="color:rgb(17, 17, 17);">HTTP 协议中并没有规定必须使用 TCP&#x2F;IP 或其支持的层。 事实上，HTTP 可以在任何互联网协议上，或其他网络上实现。 HTTP 假定其下层协议提供可靠的传输。 因此，任何能够提供这种保证的协议都可以被其使用</font></strong></p><p><strong><font style="color:rgb(17, 17, 17);"></font></strong></p><p><strong><font style="color:rgb(17, 17, 17);">详细内容可查看这篇文章 </font></strong><a href="https://blog.csdn.net/weixin_44422604/article/details/108435009"><strong><font style="color:rgb(17, 17, 17);">面试：HTTP协议与TCP协议的区别和联系-CSDN博客</font></strong></a></p></blockquote><p>攻击者登录网站应该属于POST请求，所以我们查找POST请求，找到了一条登录的流量，查看这条流量，找到了攻击者登录的用户名即为username的值</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732267420498-8ffa87d5-13d1-4ac3-8b77-799fb2f382bc.png"></p><p>从登录这条流量往后继续查询，发现了一条可疑的流量，我们查看这条流量，找到了存在漏洞的文件名以及攻击者用来执行恶意代码的文件名</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732268611367-d2884256-538a-4ee3-a454-56cf77df45bf.png"></p><p>用md5加密网站<a href="https://www.sojson.com/md5/">MD5在线加密&#x2F;解密&#x2F;破解—MD5在线</a>将这些内容按照格式进行md532位小写，包上flag{}提交</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732268694041-43cefc9b-8569-470e-b2cf-a3b89b9cc97d.png"></p><blockquote><p><strong>知识点总结：这道题考察了流量分析中的一些基础操作</strong></p></blockquote><h3 id="键盘侠"><a href="#键盘侠" class="headerlink" title="键盘侠"></a>键盘侠</h3><p>这是一道USB流量分析中的键盘流量分析题，先用tshark提取HID Data</p><p>在流量包所在目录下打开cmd输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r draobyek.pcapng -T fields -e usbhid.data &gt; hiddata.txt</span><br></pre></td></tr></table></figure><p>这样我们就得到了一份键盘报告数据，键盘流量的每条流量包都是8个字节，且击键信息都在第三个字节</p><p>接下来只要把每条流量包中的第三个字节，也就是第五个和第六个字符与表进行对照，就可以得到击键信息了</p><p>我们用一段Python代码来进行这个操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hiddata.txt&quot;</span>)<span class="keyword">as</span> file:</span><br><span class="line">    data=file.readlines();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> i ==<span class="string">&quot;\n&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data1=i.strip()</span><br><span class="line">            data_2=<span class="built_in">str</span>(data1[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line">            <span class="keyword">if</span> data_2!=<span class="string">&quot;00&quot;</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    flag.append(normalKeys[data_2])              </span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">flag1=<span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732362667651-5bd3faa8-27e6-439d-8652-5054fcb280c2.png"></p><p>但这不是最终结果，我们还要把<DEL><CAP>等字符串转换成对应的操作，完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hiddata.txt&quot;</span>)<span class="keyword">as</span> file:</span><br><span class="line">    data=file.readlines();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> i ==<span class="string">&quot;\n&quot;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">         data1=i.strip()</span><br><span class="line">         data_2=<span class="built_in">str</span>(data1[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line">         <span class="keyword">if</span> data_2!=<span class="string">&quot;00&quot;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                flag.append(normalKeys[data_2])               </span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">flag1=<span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">flag1=flag1.replace(<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot; &quot;</span>).replace(<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r&quot;&lt;DEL&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, flag1)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span> == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    start_index=<span class="keyword">match</span>.start()</span><br><span class="line">    end_index=start_index+<span class="number">5</span></span><br><span class="line">    flag1 = flag1[:start_index-<span class="number">1</span>] + flag1[end_index:]</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br></pre></td></tr></table></figure><p>最终结果如下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732363525660-f151ab08-75e0-4244-b6b2-5ad599f327ea.png"></p><blockquote><p><strong>知识点总结：这道题考察了USB流量分析中的键盘流量分析</strong></p></blockquote><h3 id="滴滴滴"><a href="#滴滴滴" class="headerlink" title="滴滴滴"></a>滴滴滴</h3><p>附件中一个jpg图片，一个wav音频，jpg图片属性中没有任何信息，用010Editor打开也没有CRC报错，文件格式没问题，也没有从16进制中看到隐藏文件</p><p>猜测应该是用steghide进行了隐写，用steghide尝试提取</p><p>在jpg图片目录下打开cmd输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">steghide extract -sf secret.jpg</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732370027906-dc304ab7-0c37-411c-b5eb-b6bbd64d06ce.png"></p><p>但是提取需要密码，猜测密码应该藏在另一个wav文件中</p><p>打开wav文件，是一段拨号音</p><p>用dtmf2num分析一下，还是在cmd中输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtmf2num 奇怪的音频.wav</span><br></pre></td></tr></table></figure><p>得到了一串数字，猜测这串数字就是密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732370208461-435c5058-5ddc-4bd9-aa34-d9cf7a37e113.png"></p><p>用这串数字作为密码再试着提取，得到了flag</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732370255895-68241615-c79b-4b00-b09b-d6d8e8d87f54.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732370279998-591f0cc4-6166-4e48-b56d-e45daf47f4b6.png"></p><blockquote><p><strong>知识点总结：这道题考察了steghide隐写文件以及拨号音的分析</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;阳光开朗大男孩&quot;&gt;&lt;a href=&quot;#阳光开朗大男孩&quot; class=&quot;headerlink&quot; title=&quot;阳光开朗大男孩&quot;&gt;&lt;/a&gt;阳光开朗大男孩&lt;/h3&gt;&lt;p&gt;附件是两个txt文件，名为flag和secret&lt;/p&gt;
&lt;p&gt;打开flag.txt，文本内容全部由</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2023NewStarCTFWeek3-FloatingRaft学习笔记</title>
    <link href="http://example.com/2024/11/23/2023NewStarCTFWeek3-FloatingRaft%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/11/23/2023NewStarCTFWeek3-FloatingRaft%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-11-23T15:34:20.442Z</published>
    <updated>2024-11-23T15:37:09.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-base100编码（emoji编码）与AES（高级加密标准）"><a href="#1-base100编码（emoji编码）与AES（高级加密标准）" class="headerlink" title="1.base100编码（emoji编码）与AES（高级加密标准）"></a>1.base100编码（emoji编码）与AES（高级加密标准）</h3><p>首先先了解一下base家族编码，base家族编码有base16、base32、base58、base64、base85、base91、base100这几种编码</p><p>base100编码是其中一种最好识别的编码，因为他全部由emoji组成</p><p>AES，中文名叫高级加密标准<font style="color:rgb(51, 51, 51);">（Advanced Encryption Standard，AES），这是最常见的对称加密算法。加密者设置一个密钥K，以密钥K与明文P为参数代入AES加密函数，最后输出密文C。而解密者需要知道密文C与密钥K，以密文C与密钥K为参数代入AES解密函数，从而得到明文P</font></p><p><font style="color:rgb(51, 51, 51);">而在“阳光开朗大男孩”一题中，flag采取的是emoji-aes编码，就是一种以emoji表情为密文、并且需要拥有私钥K才能破解密文得到明文的加密手段</font></p><h3 id="2-二维码"><a href="#2-二维码" class="headerlink" title="2.二维码"></a>2.二维码</h3><p><font style="color:rgb(51, 51, 51);">二维码在日常生活中经常提及也经常用到，不过二维码是一个统称，下面还有许多分类，而人们最常提到的二维码其实是是QR Code，在“大怨种”一题中用来记录数据的是Han Xin Code（汉信码）。</font></p><p><font style="color:rgb(51, 51, 51);">二维码是根据某种特定的几何图形和规律，在二维平面上利用黑白相间的图形来记录数据信息。二维码在水平和垂直方向都可以存储信息，并且能存储汉字、数字和图片等信息。其在代码编制上巧妙地利用构成计算机内部逻辑基础的“0”“1”比特流的概念，使用若干个与二进制相对应的几何形体来表示文字数值信息，通过图像输入设备或光电扫描设备自动识读，以实现信息自动处理。同时每种码制有其特定的字符集，每个字符占有一定的宽度，具有一定的校验功能，同时还具有对不同行的信息自动识别功能及处理图形旋转变化等特点。由于二维条形码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息。</font></p><p><font style="color:rgb(51, 51, 51);">二维码按不同码制的编码原理通常分以下类型：堆叠式（行排式）、矩阵式和邮政码。堆叠式（行排式）二维码形态上是由多行短截的一维条码堆叠而成；矩阵式二维码以矩阵的形式组成，在矩阵相应元素位置上用“点”表示二进制“1”，用“空”表示二进制“0”，由“点”和“空”的排列组成代码。</font></p><p><strong><font style="color:rgb(51, 51, 51);">堆叠式&#x2F;行排式</font></strong></p><p><font style="color:rgb(51, 51, 51);">堆叠式（行排式）二维码在码制设计、校验原理、识读方式等方面继承了一维码的诸多特点，识读设备与条码印刷与一维码兼容。但由于行数的增加，要对行进行判定，译码算法与软件也不同于一维码。代表性堆叠式(行排式)二维码有:Code16K、Code 49、PDF417等。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732372736857-c7eecdd8-fd2b-4317-a81c-6fab84663a43.png"><font style="color:rgb(85, 85, 85);"></font></p><p><strong><font style="color:rgb(51, 51, 51);">矩阵式二维码</font></strong></p><p><font style="color:rgb(51, 51, 51);">矩阵式二维条码（又称棋盘式二维条码），是在一个矩形空间通过黑、白像素在矩阵中的不同分布进行编码。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。矩阵式二维条码是建立在</font><a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/5687124?fromModule=lemma_inlink"><font style="color:rgb(51, 51, 51);">计算机图像处理</font></a><font style="color:rgb(51, 51, 51);">技术、组合编码原理等基础上的一种新型图形符号自动识读处理码制。具有代表性的矩阵式二维条码有：Code One、MaxiCode、QR Code、Data Matrix、Han Xin Code、Grid Matrix等。</font><sup><font style="color:rgb(51, 102, 204);"></font></sup></p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/49267415/1732372736844-0938ebae-6a17-49a8-bb39-206dd8f39980.jpeg"><font style="color:rgb(85, 85, 85);"></font></p><p><strong><font style="color:rgb(51, 51, 51);">邮政码</font></strong></p><p><font style="color:rgb(51, 51, 51);">邮政码是通过不同长度的条进行编码，主要用于邮件编码，属于专用领域的特殊码，如：Postnet、BPO 4-</font><font style="color:rgb(51, 51, 51);">State等。</font></p><h3 id="3-HTTP协议与TCP协议的区别与联系"><a href="#3-HTTP协议与TCP协议的区别与联系" class="headerlink" title="3.HTTP协议与TCP协议的区别与联系"></a>3.HTTP协议与TCP协议的区别与联系</h3><p><font style="color:rgb(51, 51, 51);">传输控制协议（TCP，Transmission Control Protocol）是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议。</font></p><p><font style="color:rgb(51, 51, 51);">超文本传输协议（HypertextTransfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。超文本传输协议是一种用于分布式、协作式和超媒体信息系统的应用层协议，是万维网WWW（World Wide Web）的数据通信的基础。</font></p><p>TCP协议<font style="color:rgb(77, 77, 77);">是传输层协议，主要解决数据如何在网络中传输，而HTTP协议是应用层协议，主要是解决如何包装数据。通俗的来说HTTP的任务是与服务器交换信息，它不管怎么连到服务器和保证数据正确的事情。而TCP的任务是保证连接的可靠，它只管连接，它不管连接后要传什么数据。HTTP协议是建立在TCP协议之上的一种应用，但是HTTP不一定要建立在TCP协议之上，</font><font style="color:rgb(17, 17, 17);">HTTP 协议中并没有规定必须使用 TCP&#x2F;IP 或其支持的层。 事实上，HTTP 可以在任何互联网协议上，或其他网络上实现。 HTTP 假定其下层协议提供可靠的传输。 因此，任何能够提供这种保证的协议都可以被其使用。</font></p><p><font style="color:rgb(17, 17, 17);">详细内容可查看这篇文章，这篇文章讲的比较通俗比较好懂 </font><a href="https://blog.csdn.net/weixin_44422604/article/details/108435009"><font style="color:rgb(17, 17, 17);">面试：HTTP协议与TCP协议的区别和联系-CSDN博客</font></a></p><h3 id="4-HTTP协议的四种请求"><a href="#4-HTTP协议的四种请求" class="headerlink" title="4.HTTP协议的四种请求"></a><font style="color:rgb(17, 17, 17);">4.HTTP协议的四种请求</font></h3><p><font style="color:rgb(36, 41, 46);">在 Web 服务的开发中，HTTP 协议是最常使用的协议。其中，常见的 HTTP 请求方式有四种：POST（添加）、GET（查询）、DELETE（删除）和PUT（修改）</font></p><p><strong><font style="color:rgb(36, 41, 46);">POST请求</font></strong></p><p><font style="color:rgb(36, 41, 46);">POST请求用于向指定资源提交数据，通常会导致服务器端的状态发生变化。例如，在 Web 表单中填写用户信息并提交时，就是使用POST请求方式将表单数据提交到服务器存储。</font></p><p><font style="color:rgb(36, 41, 46);">使用POST请求方式提交的数据会被包含在请求体中，而不像GET请求方式那样包含在 URL 中。因此，POST请求可以提交比GET更大的数据量，并且相对更安全。</font></p><p><font style="color:rgb(36, 41, 46);">一般应用于</font></p><ul><li><font style="color:rgb(36, 41, 46);">向服务器提交表单数据</font></li><li><font style="color:rgb(36, 41, 46);">向服务器上传文件</font></li><li><font style="color:rgb(36, 41, 46);">创建资源或提交数据到服务器</font></li></ul><p><strong><font style="color:rgb(51, 51, 51);">GET请求</font></strong></p><p><font style="color:rgb(36, 41, 46);">GET请求用于向指定资源发出请求，请求中包含了资源的 URL 和请求参数。服务器端通过解析请求参数来返回相应的资源，不会修改服务器端的状态。</font></p><p><font style="color:rgb(36, 41, 46);">使用GET请求方式提交的数据会被包含在 URL 中，因此易于被缓存和浏览器保存，但也因此不适合用于提交敏感数据。</font></p><p><font style="color:rgb(36, 41, 46);">一般应用于</font></p><ul><li><font style="color:rgb(36, 41, 46);">获取资源信息</font></li><li><font style="color:rgb(36, 41, 46);">对资源进行查询操作</font></li></ul><p><strong>DELETE请求</strong></p><p><font style="color:rgb(36, 41, 46);">DELETE请求用于请求服务器删除指定的资源，可以理解为对服务器上的资源进行删除操作。使用DELETE方式请求会导致指定的资源被永久删除，因此需要谨慎使用。</font></p><p><font style="color:rgb(36, 41, 46);">一般应用于</font></p><ul><li><font style="color:rgb(36, 41, 46);">删除指定的资源</font></li><li><font style="color:rgb(36, 41, 46);">按照条件删除一组资源</font></li></ul><p><strong>PUT请求</strong></p><p><font style="color:rgb(36, 41, 46);">PUT请求用于向服务器更新指定资源，可以理解为对服务器上的资源进行修改操作。使用PUT请求方式会覆盖原有的资源内容，因此需要谨慎使用。</font></p><p><font style="color:rgb(36, 41, 46);">一般应用于</font></p><ul><li><font style="color:rgb(36, 41, 46);">更新指定的资源</font></li><li><font style="color:rgb(36, 41, 46);">按照条件更新一组资源</font></li></ul><h3 id="5-DTMF编码"><a href="#5-DTMF编码" class="headerlink" title="5.DTMF编码"></a>5.DTMF编码</h3><p>拨号音用来通知主叫用户可以拨号。拨号音采用频率为450±25Hz的交流电源，发送电平为-10±3dBm，是连续的信号音，拨号音的编码方式是DTMF。</p><p><font style="color:rgb(51, 51, 51);">双音多频DTMF（Dual Tone Multi Frequency），双音多频，由高频群和低频群组成，高低频群各包含4个频率。一个高频信号和一个低频信号叠加组成一个组合信号，代表一个数字。DTMF信号有16个编码。利用DTMF信令可选择呼叫相应的对讲机。</font></p><p><font style="color:rgb(51, 51, 51);">DTMF编码器基于两个二阶数字正弦波振荡器，一个用于产生行频，一个用于产生列频。向DSP装入相应的系数和初始条件，就可以只用两个振荡器产生所需的八个音频信号。典型的DTMF信号频率范围是700~1700Hz，选取8000Hz作为采样频率，即可满足Nyquist条件。DTMF双音频信号由两个二阶数字正弦振荡器产生，一个用来产生行音频信号，另一个产生列音频信号。</font></p><p><font style="color:rgb(51, 51, 51);">DTMF信号包含两组</font><font style="color:rgb(51, 51, 51);">音频信号</font><font style="color:rgb(51, 51, 51);">，解码器的任务是通过数学变换把它从时域转化到频域，然后得出对应的数字信息。由于芯片处理的是数字信号，所以必须把输入信号数字化，再用DSP芯片处理。频率检测时，检测出DTMF信号的基波及二次谐波，DTMF信号只在基波上有较高的能量，而话音信号则是在基波上叠加有较强的二次谐波，检测二次谐波的作用是用来区分DTMF信号与语言和音乐信号。</font></p><p><font style="color:rgb(51, 51, 51);">DTMF信号最先用于程控电话交换系统来代替号盘脉冲信号，主叫用户摘机按键拨号后，电话号码所对应的DTMF信号通过电话线传到程控交换机中的DTMF接受电路，交换机中的微机识别被叫电话号码后，接通主被叫用户实现双方通话。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/49267415/1732375025856-24a5ddad-fbc0-4ecc-b612-f4179399b3c6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-base100编码（emoji编码）与AES（高级加密标准）&quot;&gt;&lt;a href=&quot;#1-base100编码（emoji编码）与AES（高级加密标准）&quot; class=&quot;headerlink&quot; title=&quot;1.base100编码（emoji编码）与AES（高级加</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows系统下基于github+hexo的个人Blog初步搭建</title>
    <link href="http://example.com/2024/11/05/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%9F%BA%E4%BA%8Egithub+hexo%E7%9A%84%E4%B8%AA%E4%BA%BABlog%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2024/11/05/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%9F%BA%E4%BA%8Egithub+hexo%E7%9A%84%E4%B8%AA%E4%BA%BABlog%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA/</id>
    <published>2024-11-05T04:09:11.805Z</published>
    <updated>2024-11-05T04:18:57.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考教程：</p><p><a href="https://www.bilibili.com/video/BV1Ju4m1c7WR/?vd_source=72840f1407bd8d539300fcc6c32c4fc5">【零成本】Hexo个人博客搭建教程 | 无需服务器_哔哩哔哩_bilibili</a></p><p><a href="https://blog.fiveth.cc/p/bb32/">如何用Hexo搭建个人博客? (fiveth.cc)</a>   </p></blockquote><h3 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h3><h5 id="1-Github账号"><a href="#1-Github账号" class="headerlink" title="1.Github账号"></a>1.Github账号</h5><p>首先需要有一个Github账号，没有的在Github官网上注册一个<a href="https://github.com/">GitHub · Build and ship software on a single, collaborative platform · GitHub</a></p><p>（ps：Github有时候可能会打不开或者加载速度慢，可以用Watt Toolkit加速）</p><h5 id="2-NodeJS"><a href="#2-NodeJS" class="headerlink" title="2.NodeJS"></a>2.NodeJS</h5><p>NodeJS官方下载链接<a href="https://nodejs.org/zh-cn/download/prebuilt-installer">Node.js — 下载 Node.js® (nodejs.org)</a></p><p>NodeJS的安装过程可以查看这篇文章<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">Node.js安装及环境配置之Windows篇 - 刘奇云 - 博客园 (cnblogs.com)</a>，最好是安装最新版的NodeJS</p><h5 id="3-Git"><a href="#3-Git" class="headerlink" title="3.Git"></a>3.Git</h5><p>Git官方下载链接<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></p><p>后续我们对hexo进行部署需要用到Git，安装过程可以参考这篇<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Windows系统Git安装教程（详解Git安装过程） - 学为所用 - 博客园 (cnblogs.com)</a>，同样也是安装最新版的</p><h5 id="4-Hexo"><a href="#4-Hexo" class="headerlink" title="4.Hexo"></a>4.Hexo</h5><p>在安装hexo之前，我们先检测一下是否全部下载安装成功</p><p>管理员身份运行cmd，输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v #这是nodejs自带的</span><br><span class="line">git -v</span><br></pre></td></tr></table></figure><p>若正常输出版本号则代表安装成功</p><p>接下来我们要下载安装hexo，在cmd中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli g</span><br></pre></td></tr></table></figure><p>如果无法安装，则改为输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx install hexo</span><br></pre></td></tr></table></figure><p>后续若还有npm报错的，一律改为npx</p><p>至此，已经完成了工具的准备</p><h3 id="二、搭建仓库"><a href="#二、搭建仓库" class="headerlink" title="二、搭建仓库"></a>二、搭建仓库</h3><p>接下来准备在Github中搭建用于存放静态页面的仓库</p><p>首先登录Github，在右上角点击加号，选择New repository</p><p>仓库名输入“用户名.github.io”</p><p>勾选Public，勾选add a readme file，然后Create创建</p><h3 id="三、生成ssh-key"><a href="#三、生成ssh-key" class="headerlink" title="三、生成ssh key"></a>三、生成ssh key</h3><p>电脑任意位置右键空白处，选择git bash here，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>敲4下enter</p><p>然后进入C:\Users\用户名，找到.ssh文件夹</p><p>:::color3<br><strong><font style="color:#DF2A3F;">注意，用户文件夹名称必须是英文，不能包含中文！！</font></strong></p><p><strong><font style="color:#DF2A3F;">若用户文件夹名为中文，删除.ssh文件夹，修改文件夹名后再重复上面生成.ssh的步骤</font></strong></p><p><strong><font style="color:#DF2A3F;">具体修改用户文件夹名称的方法笔者没找到，更简便的方法是新建一个用户</font></strong></p><p>:::</p><p>然后用记事本打开id_rsa.pub文件，全选文本内容复制</p><p>然后打开github，右上角点击个人头像，选择“Settings”</p><p>在左侧边栏找到“SSH and GPG keys”，新建一个ssh key，名称随意，在“Key”栏粘贴刚刚的文本内容</p><p>然后点击“Add SSH key”</p><p>接着我们测试一下是否创建成功</p><p>如果有开Watt Toolkit一类加速器先关闭，避免报错</p><p>在git bash中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -t git@github.com</span><br></pre></td></tr></table></figure><h3 id="四、本地生成Blog内容"><a href="#四、本地生成Blog内容" class="headerlink" title="四、本地生成Blog内容"></a>四、本地生成Blog内容</h3><p>自选位置新建Blog文件夹，在文件夹中打开git bash，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>如果报错command not found，则改为输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo install</span><br></pre></td></tr></table></figure><p>接着依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>现在我们就可以按住Ctrl键单击输出的链接访问我们的本地服务器了</p><p>关闭网站后记得Ctrl+C关闭本地服务器</p><h3 id="五、上线Blog"><a href="#五、上线Blog" class="headerlink" title="五、上线Blog"></a>五、上线Blog</h3><p>进入Blog文件夹，用记事本打开_config_yml</p><p>拉到最底部，把deploy后面的全部删掉，复制粘贴这段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repository: </span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure><p>:::color3<br><strong><font style="color:#DF2A3F;">注意缩进格式，每行前面两个空格不要删，冒号后的一个空格也不要删</font></strong></p><p>:::</p><p><font style="color:#000000;">打开github，打开我们新建的仓库“用户名.github.io”，右上角点击Code，复制https链接</font></p><p><font style="color:#000000;">将其粘贴至我们的_config.yml文件中</font><font style="color:#000000;background-color:#FBDE28;">repository: </font><font style="color:#000000;">后面（</font><strong><font style="color:#DF2A3F;">冒号后面的空格不要删！！！</font></strong><font style="color:#000000;">）</font></p><p><font style="color:#000000;">保存后退出，在Blog文件夹打开git bash，输入以下指令安装自动部署发布工具</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">然后依次输入</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>:::color3<br>如果是第一次使用git的话需要配置</p><p>git config –global user.email “你的邮箱”<br>git config –global user.name “用户名”</p><p>配置完后再hexo d上传</p><p>在跳出来的窗口进行登录</p><p>:::</p><p>至此，个人Blog已初步搭建完成</p><p>在浏览器内输入“用户名.github.io”，就可以访问我们的个人Blog主页了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考教程：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Ju4m1c7WR/?vd_source=72840f1407bd8d539300fcc6c32c4fc5&quot;&gt;【零成本】Hexo个人博客</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/11/02/hello-world/"/>
    <id>http://example.com/2024/11/02/hello-world/</id>
    <published>2024-11-01T16:51:27.457Z</published>
    <updated>2024-11-01T16:51:27.457Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
